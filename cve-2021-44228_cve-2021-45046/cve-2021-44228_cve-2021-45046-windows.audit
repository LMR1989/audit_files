#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This .audit addresses a temporary stop gap in targets where the patch is not installed or feasible to install in a timely manner.
#
# Sources for additional information:
#   https://logging.apache.org/log4j/2.x/security.html
#
#<ui_metadata>
#<display_name>Tenable log4j JndiLookup.class Detection</display_name>
#<spec>
#  <type>TNS</type>
#  <name>Tenable log4j JndiLookup.class Detection - Windows</name>
#  <version>1.0.0</version>
#  <link>https://logging.apache.org/log4j/2.x/security.html</link>
#</spec>
#<labels>unix,tns,log4j,agent</labels>
#<variables>
#  <variable>
#    <name>SEARCH_PATHS</name>
#    <default>C:\\</default>
#    <description>Path to the Java jar files.</description>
#    <info>The path where log4j-core-*.jar is located. If unknown use the default value.</info>
#  </variable>
#  <variable>
#    <name>JAR_NAME_FILTER</name>
#    <default>log4j-core-*.jar</default>
#    <description>Jarfile Name Filter</description>
#    <info>Filter to limit the jar files returned.</info>
#  </variable>
#  <variable>
#    <name>CLASS_FILTER</name>
#    <default>org/apache/logging/log4j/core/lookup/JndiLookup.class</default>
#    <description>Class Filter</description>
#    <info>File name filter of the class to search for.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Windows" version:"2">
<group_policy:"CVE-2021-44228_CVE-2021-45046">

<custom_item>
  type            : AUDIT_POWERSHELL
  description     : "CVE-2021-44228 / CVE-2021-45046 - Log4j JndiLookup class mitigation"
  info            : "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack. Log4j 2.15.0 makes a best-effort attempt to restrict JNDI LDAP lookups to localhost by default. Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
  solution        : "Log4j 1.x mitigation: Log4j 1.x is not impacted by this vulnerability.

    Log4j 2.x mitigation: Implement one of the mitigation techniques below.

Java 8 (or later) users should upgrade to release 2.16.0.

Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).

Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class
Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability."
  reference       : "CVE|CVE-2021-44228,CVE|CVE-2021-45046"
  see_also        : "https://logging.apache.org/log4j/2.x/security.html"
  value_type      : POLICY_TEXT
  value_data      : "^@CLASS_FILTER@ not found$"
  powershell_args : " [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null

function s($f, $a) {
 $f

 Foreach ($e in $a.Entries) {
  $fn = $e.FullName
  If ($fn -like '*.war' -Or $fn -like '*.jar' -Or $fn -like '*.ear') {
   $b = [byte[]]::new($e.Length)
   $e.Open().Read($b, 0, $b.Length) | Out-Null
   $zs =  [System.IO.MemoryStream]::new()
   $zs.Write($b, 0, $b.Length)
   $nz = [System.IO.Compression.ZipArchive]($zs)
   $nf = $f + ' => ' + $fn
   s $nf $nz
   $nz.Dispose()
  }
  ElseIf ('@CLASS_FILTER@' -in $fn) {$global:fd+=$f;$global:fd+='  '+$e.FullName}
 }
}

$fd = @()

''
'Checking:'
Get-ChildItem -Path '@SEARCH_PATHS@' -Recurse | Where {$_.Extension -in '.jar','.ear','.war'} | Foreach-Object {
 if ($_.Extension -eq '.jar' -and $_.Name -notlike '@JAR_NAME_FILTER@') {return}

 $z = [System.IO.Compression.ZipFile]::OpenRead($_.FullName)
 s $_.FullName $z
 $z.Dispose()
}

''
if ($fd) {
 '@CLASS_FILTER@ found:'
 $fd
}
else {'@CLASS_FILTER@ not found'}"
  check_type      : CHECK_REGEX
</custom_item>

</group_policy>
</check_type>
