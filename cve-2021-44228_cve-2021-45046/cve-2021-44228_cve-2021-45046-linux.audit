#
# This script is Copyright (C) 2004-2021 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision$
# $Date$
#
# Description : This document detects org/apache/logging/log4j/core/lookup/JndiLookup.class within jar files
#
#<ui_metadata>
#<display_name>Tenable log4j JndiLookup.class Detection</display_name>
#<spec>
#  <type>TNS</type>
#  <name>Tenable log4j JndiLookup.class Detection - Windows</name>
#  <version>1.0.0</version>
#  <link>https://logging.apache.org/log4j/2.x/security.html</link>
#</spec>
#<labels>unix,tns,log4j,agent</labels>
#<variables>
#  <variable>
#    <name>SEARCH_PATHS</name>
#    <default>/opt/ /usr/share/ /usr/local/ /usr/lib /root/ /home/</default>
#    <description>Search Paths</description>
#    <info>A space separated list of paths to search for jar files.</info>
#  </variable>
#  <variable>
#    <name>JAR_NAME_FILTER</name>
#    <default>log4j-core-*.jar</default>
#    <description>Jarfile Name Filter</description>
#    <info>Filter to limit the jar files returned.</info>
#  </variable>
#  <variable>
#    <name>CLASS_FILTER</name>
#    <default>org/apache/logging/log4j/core/lookup/JndiLookup.class</default>
#    <description>Class Filter</description>
#    <info>File name filter of the class to search for.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Check if python installed"
      cmd         : "python --version; python3 --version"
      expect      : "Python [2-3]\."
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : CMD_EXEC
      description : "CVE-2021-44228 / CVE-2021-45046 - Log4j JndiLookup class mitigation"
      info        : "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack. Log4j 2.15.0 makes a best-effort attempt to restrict JNDI LDAP lookups to localhost by default. Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
      solution    : "Log4j 1.x mitigation: Log4j 1.x is not impacted by this vulnerability.

        Log4j 2.x mitigation: Implement one of the mitigation techniques below.

    Java 8 (or later) users should upgrade to release 2.16.0.

    Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).
    Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class
    Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability."
      reference   : "CVE|CVE-2021-44228,CVE|CVE-2021-45046"
      see_also    : "https://logging.apache.org/log4j/2.x/security.html"
      cmd         : "PYTHON='python'; if [ $(python3 --version > /dev/null; echo $?) -eq 0 ]; then PYTHON='python3'; fi;echo -e \"import os\\nimport fnmatch\\nfrom zipfile import ZipFile\\ntry:\\n    import BytesIO\\nexcept ImportError:\\n    from io import BytesIO\\nes = []\\ndef s(f, a):\\n try:\\n  with ZipFile(a) as z:\\n   print(f)\\n   for n in z.namelist():\\n    if fnmatch.fnmatch(n.lower(), '@JAR_NAME_FILTER@'.lower()) or n.lower().endswith('.ear') or n.lower().endswith('.war'):\\n     s('{} => {}'.format(f, n), BytesIO(z.read(n)))\\n    elif '@CLASS_FILTER@'.lower() in n.lower():\\n     es.append(f)\\n     es.append('  {}'.format(n))\\n except:\\n  print('ERROR reading {}'.format(f))\\ndef f():\\n for p in '@SEARCH_PATHS@'.split(' '):\\n  for r, d, fs in os.walk(p):\\n   for b in fs:\\n    if fnmatch.fnmatch(b.lower(), '@JAR_NAME_FILTER@'.lower()) or b.lower().endswith('.ear') or b.lower().endswith('.war'):\\n     fn = os.path.join(r, b)\\n     s(fn, fn)\\nprint('Checking:')\\nf()\\nprint('')\\nif es:\\n print('@CLASS_FILTER@ found:')\\n for e in es:\\n  print(e)\\nelse:\\n print('@CLASS_FILTER@ not found')\" | $PYTHON"
      expect      : "^@CLASS_FILTER@ not found*$"
    </custom_item>
  </then>
  <else>
    <custom_item>
      type        : CMD_EXEC
      description : "CVE-2021-44228 / CVE-2021-45046 - Log4j JndiLookup class mitigation - jarfiles"
      info        : "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack. Log4j 2.15.0 makes a best-effort attempt to restrict JNDI LDAP lookups to localhost by default. Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
      solution    : "Log4j 1.x mitigation: Log4j 1.x is not impacted by this vulnerability.

        Log4j 2.x mitigation: Implement one of the mitigation techniques below.

    Java 8 (or later) users should upgrade to release 2.16.0.

    Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).
    Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class
    Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability."
      reference   : "CVE|CVE-2021-44228,CVE|CVE-2021-45046"
      see_also    : "https://logging.apache.org/log4j/2.x/security.html"
      cmd         : "IFS=$'\\n';FOUND='';FILES=$(find @SEARCH_PATHS@ -xdev -type f -iname '@JAR_NAME_FILTER@');echo 'Checking:';if [ $(unzip > /dev/null 2>&1;echo $?) -eq 0 ];then for FILE in $FILES;do echo \"$FILE\";MATCH=$(unzip -l \"$FILE\"|grep -i '@CLASS_FILTER@');if [ ! -z \"$MATCH\" ];then FOUND=\"${FOUND}${FILE}\\n${MATCH}\\n\";fi;done;elif [ $(miniunzip > /dev/null 2>&1;echo $?) -eq 0 ];then for FILE in $FILES;do echo \"$FILE\";MATCH=$(miniunzip -l \"$FILE\"|grep -i '@CLASS_FILTER@');if [ ! -z \"$MATCH\" ];then FOUND=\"${FOUND}${FILE}\\n${MATCH}\\n\";fi;done;elif [ $(7z > /dev/null 2>&1;echo $?) -eq 0 ];then for FILE in $FILES;do echo \"$FILE\";MATCH=$(7z l \"$FILE\"|grep -i '@CLASS_FILTER@');if [ ! -z \"$MATCH\" ];then FOUND=\"${FOUND}${FILE}\\n${MATCH}\\n\";fi;done;elif [ $(7za > /dev/null 2>&1;echo $?) -eq 0 ];then for FILE in $FILES;do echo \"$FILE\";MATCH=$(7za l \"$FILE\"|grep -i '@CLASS_FILTER@');if [ ! -z \"$MATCH\" ];then FOUND=\"${FOUND}${FILE}\\n${MATCH}\\n\";fi;done;else for FILE in $FILES;do echo \"$FILE\";done;echo '';echo 'ERROR: No unzip utility found. Need to manually review the jar files';exit;fi;echo '';if [ -z \"$FOUND\" ];then echo '@CLASS_FILTER@ not found';else echo '@CLASS_FILTER@ found:';echo -e $FOUND;fi"
      expect      : "^@CLASS_FILTER@ not found*$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "CVE-2021-44228 / CVE-2021-45046 - Log4j JndiLookup class mitigation - ear / war files"
      info        : "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack. Log4j 2.15.0 makes a best-effort attempt to restrict JNDI LDAP lookups to localhost by default. Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default.

NOTE: This check identifies ear / war files that exist within the Search Paths.  Any ear / war files identified here need to be manually reviewed to ensure the JndiLookup class is not present."
      solution    : "Log4j 1.x mitigation: Log4j 1.x is not impacted by this vulnerability.

        Log4j 2.x mitigation: Implement one of the mitigation techniques below.

    Java 8 (or later) users should upgrade to release 2.16.0.

    Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).
    Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class
    Note that only the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted by this vulnerability."
      reference   : "CVE|CVE-2021-44228,CVE|CVE-2021-45046"
      see_also    : "https://logging.apache.org/log4j/2.x/security.html"
      cmd         : "find @SEARCH_PATHS@ -xdev -type f \\( -iname '*.ear' -o -iname '*.war' \\)"
      expect      : "^No ear / war files found*$"
      severity    : MEDIUM
    </custom_item>
  </else>
</if>

</check_type>
